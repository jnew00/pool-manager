# Production Docker Compose Configuration
# For self-hosted deployments

version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: poolmanager-app
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://poolmanager:${DB_PASSWORD}@db:5432/poolmanager
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - REDIS_URL=redis://redis:6379
      - ESPN_API_BASE_URL=https://site.api.espn.com/apis/site/v2/sports/football/nfl
      - MYSPORTSFEEDS_API_KEY=${MYSPORTSFEEDS_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_backups:/app/backups
      - app_logs:/app/logs
    networks:
      - poolmanager-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: poolmanager-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=poolmanager
      - POSTGRES_USER=poolmanager
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - poolmanager-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U poolmanager -d poolmanager']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: poolmanager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - poolmanager-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: poolmanager-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - app
    networks:
      - poolmanager-network

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: poolmanager-backup
    restart: 'no'
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    networks:
      - poolmanager-network
    command: >
      sh -c "
        echo '0 2 * * * pg_dump -h db -U poolmanager poolmanager > /backups/daily_backup_\$$(date +\\%Y\\%m\\%d).sql' | crontab -
        echo '0 0 * * 0 find /backups -name \"daily_backup_*.sql\" -mtime +7 -delete' | crontab -
        crond -f
      "
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_backups:
    driver: local
  app_logs:
    driver: local

networks:
  poolmanager-network:
    driver: bridge
